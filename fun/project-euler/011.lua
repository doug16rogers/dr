-- $Id: 011.lua 42 2008-09-12 04:50:23Z rogers $

-- Solves the 20x20 grid, Problem 11.

-- It's not clear from the instructions whether or not a straight line of
-- four is required, or just any adjacent 4, which could be connected even
-- like a T (11,12,13,22), which cannot be generated by just picking a
-- starting point and going in a direction. My initial maximum for a straight
-- line was 51267216 and that was incorrect, so I used the eyeball method.

-- It turns out that my diagonal calculation must have been wrong because the
-- final answer was indeed in a straight line from {16,4} to {13,7}:
-- 70600674. Once I fixed the diagonal generation, it worked.

local grid = {
   { 08,02,22,97,38,15,00,40,00,75,04,05,07,78,52,12,50,77,91,08 },
   { 49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,04,56,62,00 },
   { 81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,03,49,13,36,65 },
   { 52,70,95,23,04,60,11,42,69,24,68,56,01,32,56,71,37,02,36,91 },
   { 22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80 },
   { 24,47,32,60,99,03,45,02,44,75,33,53,78,36,84,20,35,17,12,50 },
   { 32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70 },
   { 67,26,20,68,02,62,12,20,95,63,94,39,63,08,40,91,66,49,94,21 },
   { 24,55,58,05,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72 },
   { 21,36,23,09,75,00,76,44,20,45,35,14,00,61,33,97,34,31,33,95 },
   { 78,17,53,28,22,75,31,67,15,94,03,80,04,62,16,14,09,53,56,92 },
   { 16,39,05,42,96,35,31,47,55,58,88,24,00,17,54,24,36,29,85,57 },
   { 86,56,00,48,35,71,89,07,05,44,44,37,44,60,21,58,51,54,17,58 },
   { 19,80,81,68,05,94,47,69,28,73,92,13,86,52,17,77,04,89,55,40 },
   { 04,52,08,83,97,35,99,16,07,97,57,32,16,26,26,79,33,27,98,66 },
   { 88,36,68,87,57,62,20,72,03,46,33,67,46,55,12,32,63,93,53,69 },
   { 04,42,16,73,38,25,39,11,24,94,72,18,08,46,29,32,40,62,76,36 },
   { 20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,04,36,16 },
   { 20,73,35,29,78,31,90,01,74,31,49,71,48,86,81,16,23,57,05,54 },
   { 01,70,54,71,83,51,54,69,16,92,33,48,61,43,52,01,89,19,67,48 },
}   -- grid

function grid:prod(list)
   local prod = 1
   for _, cell in ipairs(list) do
      prod = prod * self[cell[1]][cell[2]]
   end
   return prod
end   -- grid:prod()

local N = #grid
local M = #grid[1]
local S = 4        -- Number of items in each sum.

local best = 0
local prod
local line

local function printf(fmt, ...) io.write(string.format(fmt, ...)) end

function prodS(r, c)
   local prod = 1
   for i = 0, S - 1 do prod = prod * r[c+i] end
   return prod
end

function best_in(r, best)
   best = best or 0
   local prod
   for i = 1, #r - S + 1 do
      prod = prodS(r, i)
      if prod > best then best = prod end
   end
   return best
end

function diag(grid, start_r, start_c, step_r, step_c)
   local line = {}
   local n, m = #grid, #grid[1]
   local r, c = start_r, start_c

   while (r >= 1) and (r <= n) and (c >= 1) and (c <= m) do
      line[#line + 1] = grid[r][c]
      r = r + step_r
      c = c + step_c
   end

   return line
end   -- diag()

-- Check rows:
for r = 1, N do
   best = best_in(grid[r], best)
end

print('best after rows: ', best)

-- Check columns:
for c = 1, M do
   line = {}
   for r = 1, N do line[r] = grid[r][c] end
   best = best_in(line, best)
end

print('best after cols: ', best)

-- Check forward diagonals starting in top row.

for c = 1, M - S + 1 do
   best = best_in(diag(grid, 1, c, 1, 1), best)
end

print('best after dia1: ', best)

-- Forward diagonals along first column.

for r = 1, N - S + 1 do
   best = best_in(diag(grid, r, 1, 1, 1), best)
end

print('best after dia2: ', best)

-- Check backward diagonals starting in top row:

for c = S, M do
   best = best_in(diag(grid, 1, c, 1, -1), best)
end

print('best after dia3: ', best)

-- Forward diagonals along first column.

for r = S, N do
   best = best_in(diag(grid, r, 1, 1, -1), best)
end

print('best after dia4: ', best)

printf("\n")
printf("  ")
for c = 1, M do printf(" %02u", c) end
printf("\n")
for r = 1, N do
   printf("%02u", r)
   for c = 1, M do
      local v = grid[r][c]
      if v >= 90 then
         printf("#%u#", v % 10)
      elseif v >= 80 then
         printf("*%u*", v % 10)
      elseif v >= 70 then
         printf("<%u>", v % 10)
      else
         printf("   ")
      end
   end
   printf(" %02u\n", r)
end
printf("  ")
for c = 1, M do printf(" %02u", c) end
printf("\n")

-- Eyeballed guesses:
--  {{15, 4}, {15, 5}, {14, 6}, {15, 7}} = 74922606  But {13, 7} > {15, 4}
--  {{13, 7}, {15, 5}, {14, 6}, {15, 7}} = 80338698  Perhaps T not allowed?
--  {{16, 4}, {15, 5}, {14, 6}, {15, 7}} = 78533334  Perhaps need straight line
guess = {{16, 4}, {15, 5}, {14, 6}, {13, 7}}  -- 70600674, correct!
printf("Eyeballed best: %u\n", grid:prod(guess))

print('best linear: ', best)
